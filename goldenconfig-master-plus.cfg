#!define WITH_MYSQL
#!define WITH_AUTH
#!define WITH_USERLOCDB
#!define WITH_NAT
#!define WITH_WEBSOCKETS
#!define WITH_TLS

#!substdef "!MY_IP_ADDR!216.47.129.36!g"
#!substdef "!MY_DOMAIN!216.47.129.36!g"
#!substdef "!MY_WS_PORT!80!g"
#!substdef "!MY_WSS_PORT!443!g"
#!substdef "!MY_WS_ADDR!tcp:MY_IP_ADDR:MY_WS_PORT!g"
#!substdef "!MY_WSS_ADDR!tls:MY_IP_ADDR:MY_WSS_PORT!g"


####### Defined Values #########

# *** Value defines - IDs used later in config

#!ifdef WITH_MYSQL
# - database URL - used to connect to database server by modules such
#       as: auth_db, acc, usrloc, a.s.o.
#!ifndef DBURL
#!define DBURL "mysql://kamailio:kamailiorw@localhost/kamailio"
#!endif
#!endif


# - flags
#   FLT_ - per transaction (message) flags
#	FLB_ - per branch flags
#!define FLT_ACC 1
#!define FLT_ACCMISSED 2
#!define FLT_ACCFAILED 3
#!define FLT_NATS 5

#!define FLB_NATB 6
#!define FLB_NATSIPPING 7

####### Global Parameters #########

### LOG Levels: 3=DBG, 2=INFO, 1=NOTICE, 0=WARN, -1=ERR
#!ifdef WITH_DEBUG
#log_stderror=yes
#!else
debug=2
log_stderror=no
#!endif

memdbg=5
memlog=5

log_facility=LOG_LOCAL0

/* number of SIP routing processes */
children=8

#!ifdef WITH_TLS
enable_tls=yes
#!endif

listen=MY_IP_ADDR
#!ifdef WITH_WEBSOCKETS
listen=MY_WS_ADDR
#!endif
#!ifdef WITH_TLS
listen=MY_WSS_ADDR
#!endif
/* life time of TCP connection when there is no traffic
 * - a bit higher than registration expires to cope with UA behind NAT */


use_dns_cache = on            # Use KAMAILIO internal DNS cache
use_dns_failover = on      # Depends on KAMAILIO internal DNS cache
dns_srv_loadbalancing = on      #
dns_try_naptr = on            #
dns_retr_time=1          # Time in seconds before retrying a DNS request
dns_retr_no=3              # Number of DNS retransmissions before giving up

# Set protocol preference order - ignore target priority
dns_naptr_ignore_rfc= yes       # Ignore target NAPTR priority
dns_tls_pref=50          # First priority: TLS
dns_tcp_pref=30          # Second priority: TCP
dns_udp_pref=10          # Third priority: UDP

tcp_connection_lifetime=3604
tcp_accept_no_cl=yes
tcp_rd_buf_size=16384

####### Modules Section ########

/* set paths to location of modules */
# mpath="/usr/local/lib/kamailio/modules/"

#!ifdef WITH_MYSQL
loadmodule "db_mysql.so"
#!endif

loadmodule "jsonrpcs.so"
loadmodule "kex.so"
loadmodule "corex.so"
loadmodule "tm.so"
loadmodule "tmx.so"
loadmodule "sl.so"
loadmodule "rr.so"
loadmodule "pv.so"
loadmodule "maxfwd.so"
loadmodule "usrloc.so"
loadmodule "registrar.so"
loadmodule "textops.so"
loadmodule "siputils.so"
loadmodule "xlog.so"
loadmodule "sanity.so"
loadmodule "ctl.so"
loadmodule "cfg_rpc.so"
loadmodule "acc.so"
loadmodule "counters.so"
loadmodule "rtpengine.so"
loadmodule "xhttp.so"
loadmodule "websocket.so"
loadmodule "sdpops.so"
loadmodule "textopsx.so"

#!ifdef WITH_AUTH
loadmodule "auth.so"
loadmodule "auth_db.so"
#!endif

#!ifdef WITH_NAT
loadmodule "nathelper.so"
##loadmodule "rtpproxy.so"
#!endif

#!ifdef WITH_TLS
loadmodule "tls.so"
#!endif

#!ifdef WITH_DEBUG
loadmodule "debugger.so"
#!endif

# ----------------- setting module-specific parameters ---------------


# ----- jsonrpcs params -----
modparam("jsonrpcs", "pretty_format", 1)
/* set the path to RPC fifo control file */
#modparam("jsonrpcs", "fifo_name", "/var/run/kamailio/kamailio_rpc_fifo")
/* set the path to RPC unix socket control file */
#modparam("jsonrpcs", "dgram_socket", "/var/run/kamailio/kamailio_rpc.sock")

# ----- ctl params -----
/* set the path to RPC unix socket control file */
# modparam("ctl", "binrpc", "unix:/var/run/kamailio/kamailio_ctl")

# ----- tm params -----
# auto-discard branches from previous serial forking leg
modparam("tm", "failure_reply_mode", 3)
# default retransmission timeout: 30sec
modparam("tm", "fr_timer", 30000)
# default invite retransmission timeout after 1xx: 120sec
modparam("tm", "fr_inv_timer", 120000)

# ----- rr params -----
# set next param to 1 to add value to ;lr param (helps with some UAs)
modparam("rr", "enable_full_lr", 1)
# do not append from tag to the RR (no need for this script)
modparam("rr", "append_fromtag", 0)

# ----- registrar params -----
modparam("registrar", "method_filtering", 1)
/* max value for expires of registrations */
modparam("registrar", "max_expires", 3600)

# ----- acc params -----
/* what special events should be accounted ? */
modparam("acc", "early_media", 0)
modparam("acc", "report_ack", 0)
modparam("acc", "report_cancels", 0)
/* by default ww do not adjust the direct of the sequential requests.
 * if you enable this parameter, be sure the enable "append_fromtag"
 * in "rr" module */
modparam("acc", "detect_direction", 0)
/* account triggers (flags) */
modparam("acc", "log_flag", FLT_ACC)
modparam("acc", "log_missed_flag", FLT_ACCMISSED)
modparam("acc", "log_extra",
	"src_user=$fU;src_domain=$fd;src_ip=$si;"
	"dst_ouser=$tU;dst_user=$rU;dst_domain=$rd")
modparam("acc", "failed_transaction_flag", FLT_ACCFAILED)
/* enhanced DB accounting */


# ----- auth_db params -----
#!ifdef WITH_AUTH
modparam("auth_db", "db_url", DBURL)
modparam("auth_db", "calculate_ha1", yes)
modparam("auth_db", "password_column", "password")
modparam("auth_db", "load_credentials", "")
#!endif


#!ifdef WITH_NAT
# ----- rtpproxy params -----
modparam("rtpengine", "rtpengine_sock", "udp:127.0.0.1:22222")

# ----- nathelper params -----
modparam("nathelper", "natping_interval", 30)
modparam("nathelper", "ping_nated_only", 1)
modparam("nathelper", "sipping_bflag", FLB_NATSIPPING)
modparam("nathelper", "sipping_from", "sip:pinger@216.47.129.36")

# params needed for NAT traversal in other modules
modparam("nathelper|registrar", "received_avp", "$avp(RECEIVED)")
modparam("usrloc", "nat_bflag", FLB_NATB)
#!endif

#!ifdef WITH_TLS
# ----- tls params -----
modparam("tls", "config", "/usr/local/etc/kamailio/tls.cfg")
modparam("tls", "private_key", "/etc/certs/nginx/key.pem")
modparam("tls", "certificate", "/etc/certs/nginx/cert.pem")
#!endif

#!ifdef WITH_DEBUG
# ----- debugger params -----
modparam("debugger", "cfgtrace", 1)
modparam("debugger", "log_level_name", "exec")
#!endif


####### Routing Logic ########

/* Main SIP request routing logic
 * - processing of any incoming SIP request starts with this route
 * - note: this is the same as route { ... } */
request_route {

	# per request initial checks
	route(REQINIT);

	#!ifdef WITH_WEBSOCKETS
		if (nat_uac_test(64)) {
			# Do NAT traversal stuff for requests from a WebSocket
			# connection - even if it is not behind a NAT!
			# This won't be needed in the future if Kamailio and the
			# WebSocket client support Outbound and Path.
			force_rport();
			if (is_method("REGISTER")) {
				fix_nated_register();
			} else {
				if (!add_contact_alias()) {
					xlog("L_ERR", "Error aliasing contact <$ct>\n");
					sl_send_reply("400", "Bad Request");
					exit;
				}
			}
		}
	#!endif


	# NAT detection
	route(NATDETECT);

	# CANCEL processing
	if (is_method("CANCEL")) {
		if (t_check_trans()) {
			route(RELAY);
		}
		exit;
	}

	# handle requests within SIP dialogs
	route(WITHINDLG);

	### only initial requests (no To tag)

	
	t_check_trans();

	# authentication
	route(AUTH);

	# record routing for dialog forming requests (in case they are routed)
	# - remove preloaded route headers
	remove_hf("Route");
	if (is_method("INVITE|SUBSCRIBE")) {
		record_route();
	}


	# dispatch requests to foreign domains
	route(SIPOUT);

	### requests for my local domains

	# handle presence related requests
	route(PRESENCE);

	# handle registrations
	route(REGISTRAR);

	if ($rU==$null) {
		# request with no Username in RURI
		sl_send_reply("484","Address Incomplete");
		exit;
	}


	# user location service
	route(LOCATION);
}




route[SETUP_BY_TRANSPORT] {

	if ($ru =~ "transport=ws") {
		xlog("L_INFO", "Request going to WS");
		if(sdp_with_transport("RTP/SAVPF")) {
                        rtpengine_offer("force trust-address replace-origin replace-session-connection ICE=force");
                        t_on_reply("REPLY_WS_TO_WS");
                        return;
                }
                
#		rtpengine_manage("froc+SP");
		rtpengine_offer("force trust-address replace-origin replace-session-connection ICE=force RTP/SAVPF");
		t_on_reply("REPLY_FROM_WS");
	}
	else if ($proto =~ "ws") {
		xlog("L_INFO", "Request coming from WS");
#		rtpengine_manage("froc-sp");
		rtpengine_offer("force trust-address replace-origin replace-session-connection ICE=remove RTP/AVP");
		t_on_reply("REPLY_TO_WS");
	}
	else {
		xlog("L_INFO", "This is a classic phone call");
#	rtpengine_manage("co");
		rtpengine_offer("replace-origin replace-session-connection");
		t_on_reply("MANAGE_CLASSIC_REPLY");
	}
}





# Wrapper for relaying requests
route[RELAY] {

	if (is_method("INVITE")) {
		route(SETUP_BY_TRANSPORT);
		if(!t_is_set("failure_route")){
			xlog("L_INFO","manage failure $rs");
			t_on_failure("MANAGE_FAILURE");
			 
		}
	}

	if (!t_relay()) {
		sl_reply_error();
	}
	exit;
}

# Per SIP request initial checks
route[REQINIT] {
	if (!mf_process_maxfwd_header("10")) {
		sl_send_reply("483","Too Many Hops");
		exit;
	}

	if(is_method("OPTIONS") && uri==myself && $rU==$null) {
		sl_send_reply("200","Keepalive");
		exit;
	}

	if(!sanity_check("1511", "7")) {
		xlog("Malformed SIP message from $si:$sp\n");
		exit;
	}
}

# Handle requests within SIP dialogs
route[WITHINDLG] {
	if (has_totag()){
		# sequential request withing a dialog should
		# take the path determined by record-routing
		if (loose_route()) {
	#!ifdef WITH_WEBSOCKETS
			if ($du == "") {
				if (!handle_ruri_alias()) {
					xlog("L_ERR", "Bad alias <$ru>\n");
					sl_send_reply("400", "Bad Request");
					exit;
				}
			}
	#!endif
			route(DLGURI);
			if (is_method("BYE")) {
				setflag(FLT_ACC); # do accounting ...
				setflag(FLT_ACCFAILED); # ... even if the transaction fails
			} else if ( is_method("ACK") ) {
				# ACK is forwarded statelessy
				route(NATMANAGE);
			} else if ( is_method("NOTIFY") ) {
				# Add Record-Route for in-dialog NOTIFY as per RFC 6665.
				record_route();
			}
			route(RELAY);
	
		}
		else{
			if (is_method("SUBSCRIBE") && uri == myself) {
				# in-dialog subscribe requests
				route(PRESENCE);
				exit;
			}
			if ( is_method("ACK") ) {
				if ( t_check_trans() ) {
					# no loose-route, but stateful ACK;
					# must be an ACK after a 487
					# or e.g. 404 from upstream server
					route(RELAY);
					exit;
				} else {
					# ACK without matching transaction ... ignore and discard
					exit;
				}
			}
			sl_send_reply("404","Not here");
		}
		exit;
	}
}
# Handle SIP registrations
route[REGISTRAR] {
	if (is_method("REGISTER")){

		if(isflagset(FLT_NATS)) {
			setbflag(FLB_NATB);
		}
		if (!save("location")) {
			sl_reply_error();
		}
		exit;
	}
}
# User location service
route[LOCATION] {

	$avp(oexten) = $rU;
	if (!lookup("location")) {
		$var(rc) = $rc;
		#route(TOVOICEMAIL);
		t_newtran();
		switch ($var(rc)) {
			case -1:
			case -3:
				send_reply("404", "Not Found");
				exit;
			case -2:
				send_reply("405", "Method Not Allowed");
				exit;
		}
	}


	route(RELAY);
	exit;
}

# Presence server processing
route[PRESENCE] {
	if(!is_method("PUBLISH|SUBSCRIBE")) return;

	if(is_method("SUBSCRIBE") && $hdr(Event)=="message-summary") {
		#route(TOVOICEMAIL);
		# returns here if no voicemail server is configured
		sl_send_reply("404", "No voicemail service");
		exit;
	}
	# if presence enabled, this part will not be executed
	if (is_method("PUBLISH") || $rU==$null) {
		sl_send_reply("404", "Not here");
		exit;
	}
	return;
}

# IP authorization and user authentication
route[AUTH] {
#!ifdef WITH_AUTH
	if (is_method("REGISTER") || from_uri==myself) {
		# authenticate requests
		if (!auth_check("$fd", "subscriber", "1")) {
			auth_challenge("$fd", "0");
			exit;
		}
		# user authenticated - remove auth header
		if(!is_method("REGISTER|PUBLISH"))
			consume_credentials();
	}
	# if caller is not local subscriber, then check if it calls
	# a local destination, otherwise deny, not an open relay here
	if (from_uri!=myself && uri!=myself) {
		sl_send_reply("403","Not relaying");
		exit;
	}

#!endif
	return;
}

# Caller NAT detection
route[NATDETECT] {
#!ifdef WITH_NAT
	force_rport();
	if (nat_uac_test("19")) {
		if (is_method("REGISTER")) {
			fix_nated_register();
		} else {
			if(is_first_hop()) {
				set_contact_alias();
			}
		}
		setflag(FLT_NATS);
	}
#!endif
	return;
}

# RTPProxy control and signaling updates for NAT traversal

#!ifdef WITH_NAT
route[NATMANAGE] {
	if (is_request()) {
		if(has_totag()) {
			if(check_route_param("nat=yes")) {
				setbflag(FLB_NATB);
			}
		}
	}
	if (!(isflagset(FLT_NATS) || isbflagset(FLB_NATB)))
		return;

	if (is_request()) {
		if (!has_totag()) {
			if(t_is_branch_route()) {
				add_rr_param(";nat=yes");
			}
		}
	}
	if (is_reply()) {
		if(isbflagset(FLB_NATB)) {
			if(is_first_hop())
				set_contact_alias();
		}
	}
	return;
}
#!endif



# URI update for dialog requests
route[DLGURI] {
#!ifdef WITH_NAT
	if(!isdsturiset()) {
		handle_ruri_alias();
	}
#!endif
	return;
}

# Routing to foreign domains
route[SIPOUT] {
	if (uri==myself) return;

	append_hf("P-hint: outbound\r\n");
	route(RELAY);
	exit;
}

# manage outgoing branches 

branch_route[MANAGE_BRANCH] {
	xlog("L_INFO","insde MANAGE_BRANCH");
	xdbg("new branch [$T_branch_idx] to $ru\n");
	route(NATMANAGE);
}

onreply_route[REPLY_TO_WS] {

	xlog("L_INFO", "Reply from softphone: $rs");
	
	if (t_check_status("183")) {
		change_reply_status("180", "Ringing");
		remove_body();
		exit;
	}

	if(!(status=~"[12][0-9][0-9]") || !(sdp_content()))
		return;

	rtpengine_answer("trust-address replace-origin replace-session-connection ICE=force RTP/SAVPF");

	route(NATMANAGE);
}

onreply_route[REPLY_FROM_WS] {

	xlog("L_INFO", "Reply from webrtc client: $rs");

	if(status=~"[12][0-9][0-9]") {
		rtpengine_answer("trust-address replace-origin replace-session-connection ICE=remove RTP/AVP");
		route(NATMANAGE);
	}
}


# manage incoming replies
onreply_route[MANAGE_CLASSIC_REPLY] {
	xdbg("incoming reply\n");
	if(status=~"[12][0-9][0-9]"){
		rtpengine_answer("replace-origin replace-session-connection");
		route(NATMANAGE);
	}
}



onreply_route[REPLY_WS_TO_WS] {
        xlog("L_INFO", "WS to WS");
        if(status=~"[12][0-9][0-9]") {
        	rtpengine_answer("force trust-address replace-origin replace-session-connection ICE=force");
                route(NATMANAGE);
        }
}



failure_route[MANAGE_FAILURE] {
	route(NATMANAGE);

	if (t_is_canceled()) {
		exit;
	}
}


#!ifdef WITH_WEBSOCKETS
onreply_route {
	if ((($Rp == MY_WS_PORT || $Rp == MY_WSS_PORT)
		&& !(proto == WS || proto == WSS))) {
		xlog("L_WARN", "SIP response received on $Rp\n");
		drop;
	}

	if (nat_uac_test(64)) {
		# Do NAT traversal stuff for replies to a WebSocket connection
		# - even if it is not behind a NAT!
		# This won't be needed in the future if Kamailio and the
		# WebSocket client support Outbound and Path.
		add_contact_alias();
	}
}

event_route[xhttp:request] {
	set_reply_close();
	set_reply_no_connect();
	
	if ($Rp != MY_WS_PORT
#!ifdef WITH_TLS
	    && $Rp != MY_WSS_PORT
#!endif
	) {
		xlog("L_WARN", "HTTP request received on $Rp\n");
		xhttp_reply("403", "Forbidden", "", "");
		exit;
	}

	xlog("L_DBG", "HTTP Request Received\n");

	if ($hdr(Upgrade)=~"websocket"
			&& $hdr(Connection)=~"Upgrade"
			&& $rm=~"GET") {

		if ($hdr(Host) == $null || !is_myself("sip:" + $hdr(Host))) {
			xlog("L_WARN", "Bad host $hdr(Host)\n");
			xhttp_reply("403", "Forbidden", "", "");
			exit;
		}

		if (ws_handle_handshake())
		{
			# Optional... cache some information about the
			# successful connection
			exit;
		}
	}

	xhttp_reply("404", "Not Found", "", "");
}

event_route[websocket:closed] {
	xlog("L_INFO", "WebSocket connection from $si:$sp has closed\n");
}
#!endif
